name: Terraform CI/CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the master branch
  push:
    branches:
      - master
    paths:
      - 'terraform/**'

  # Triggers the workflow on pull request events
  pull_request:
    paths:
      - 'terraform/**'

jobs:
  # This job runs for both pull requests and pushes to master.
  # It generates a plan and stores it as an artifact.
  terraform_plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    timeout-minutes: 15

    # Use a specific directory for all commands
    defaults:
      run:
        working-directory: ./terraform

    # Grant permissions for posting PR comments
    permissions:
      contents: read
      pull-requests: write # Required to post plan comments on PRs

    # Define an output for the plan's exit code
    outputs:
      tf_plan_exit_code: ${{ steps.plan.outputs.exitcode }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2

      - name: Create Dummy Zip File
        run: touch dummy.zip

      - name: Create TFVars File from Secret
        run: |
          cat <<EOF > terraform.tfvars
          ${{ secrets.TF_VARS }}
          EOF

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: |
          # Run plan and capture its exit code on the next line.
          # The 'continue-on-error' flag allows the script to continue even on a non-zero exit code.
          terraform plan -no-color -detailed-exitcode -out=tfplan
          TF_EXIT_CODE=$?

          # Set the output variable for use in later jobs
          echo "exitcode=${TF_EXIT_CODE:-0}" >> $GITHUB_OUTPUT

          # If the exit code was 1 (an actual error), fail the step.
          # Exit codes 0 (no changes) and 2 (changes) are considered success for this step.
          if [ ${TF_EXIT_CODE} -eq 1 ]; then
            exit 1
          fi
        continue-on-error: true

      # On Pull Requests, format and post the plan as a PR comment
      - name: Post Plan to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const output = `#### Terraform Plan ðŸ“–\`\`\`\n${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}\n\`\`\``;

            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Plan')
            });

            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              });
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
            }

      - name: Upload Plan Artifact
        if: steps.plan.outputs.exitcode == 2
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: terraform/tfplan

  # NEW JOB: This job runs unconditionally after the plan to print debug info.
  debug_apply_conditions:
    name: 'Debug Apply Conditions'
    runs-on: ubuntu-latest
    needs: terraform_plan
    if: always() # This ensures the job always runs, even if the plan fails

    steps:
      - name: Print apply conditions
        run: |
          echo "Event Name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Plan Exit Code: ${{ needs.terraform_plan.outputs.tf_plan_exit_code }}"

  #  This job only runs on a push to master, after the plan job succeeds,
  # and only if the plan contained changes.
  terraform_apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: [terraform_plan, debug_apply_conditions] # Ensures this job runs after plan and debug
    timeout-minutes: 60

    # Only run this job if it's a push to master and the plan had changes (exit code 2)
    if: github.ref == 'refs/heads/master' && github.event_name == 'push' && needs.terraform_plan.outputs.tf_plan_exit_code == 2

    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2

      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: terraform/

      # We still need to run 'init' in the apply job
      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve "tfplan"
