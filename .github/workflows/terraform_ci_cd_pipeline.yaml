name: Terraform CI/CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the main branch
  push:
    branches:
      - main
    paths:
      - 'terraform/**'

  # Triggers the workflow on pull request events
  pull_request:
    paths:
      - 'terraform/**'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  terraform:
    name: 'Terraform Plan & Apply'
    runs-on: ubuntu-latest
    timeout-minutes: 60 # Fails the entire job if it runs for more than 60 minutes

    # Use the 'production' environment on the main branch.
    # This enables a required manual approval before applying changes.
    environment:
      name: production
      url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

    # Use a specific directory for all commands
    defaults:
      run:
        working-directory: ./terraform

    # Grant permissions for posting PR comments
    permissions:
      contents: read
      pull-requests: write # Required to post plan comments on PRs

    steps:
      # 1. Checkout the repository to the runner
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Configure AWS credentials using static access keys
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      # 3. Setup Terraform CLI with a specific version
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2

      # 4. Create the dummy.zip file required by your Lambda resource
      - name: Create Dummy Zip File
        run: touch dummy.zip

      # 5. Create the terraform.tfvars file from a GitHub secret
      # This keeps sensitive variable values out of the repository.
      - name: Create TFVars File from Secret
        run: echo "${{ secrets.TF_VARS }}" > terraform.tfvars

      # 6. Initialize a new or existing Terraform working directory
      - name: Terraform Init
        id: init
        run: terraform init

      # 7. Validate the Terraform configuration
      # This provides a fast fail for syntax errors before running a full plan.
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      # 8. Generate a plan from the configuration
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -out=tfplan
        # Continue even if the plan shows changes, which would return a non-zero exit code
        continue-on-error: true

      # 9. On Pull Requests, format and post the plan as a PR comment
      - name: Post Plan to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const output = `#### Terraform Plan ðŸ“–\`\`\`\n${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}\n\`\`\``;

            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Plan')
            });

            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              });
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
            }

      # 10. On a push to main, apply the plan.
      # The 'production' environment with a "Required reviewer" rule will pause the
      # workflow at this step until it's manually approved in the GitHub UI.
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && steps.plan.exit_code == 2
        run: terraform apply -auto-approve "tfplan"

